# centerline-width/: python -m pytest -v
# Pytests to Compare and Verify Expected Outputs
from io import StringIO
import os
from pathlib import Path

# External Python libraries (installed via pip install)
import pytest
import matplotlib.testing.compare
import matplotlib.pyplot as plt

# Internal centerline-width reference to access functions, global variables, and error handling
import centerline_width


def generate_testRiver():
    csv_example = StringIO()
    csv_example.write("llat,llon,rlat,rlon\n")
    csv_example.write(
        "30.03758064742554,-92.86856870164003,30.03744106431763,-92.867475846432\n"
    )
    csv_example.write(
        "30.03761289873068,-92.86854932864129,30.03744779451432,-92.86747357248917\n"
    )
    csv_example.write(
        "30.03764767910492,-92.86854615646305,30.03748158510661,-92.86744912321454\n"
    )
    csv_example.write(
        "30.03767440933011,-92.86853555132092,30.03750644719021,-92.86743200196584\n"
    )
    csv_example.write(
        "30.03770236278642,-92.8685329553435,30.03752454918347,-92.86743019872145\n"
    )
    csv_example.write(
        "30.03772919351539,-92.86852225012414,30.0375426005056,-92.8674152219088\n"
    )
    csv_example.write(
        "30.0377490549762,-92.86851215967346,30.0375721590616,-92.8674007572212\n"
    )
    csv_example.write(
        "30.03778301480612,-92.86850070336355,30.03760885519144,-92.86738399853574\n"
    )
    csv_example.write(
        "30.03781601910584,-92.86848128471483,30.03763647218977,-92.86736152540908\n"
    )
    csv_example.write(
        "30.03784317873953,-92.86847053431235,30.0376710739572,-92.86733658820407\n"
    )
    csv_example.write(
        "30.03787040125924,-92.8684597471607,30.03771036353054,-92.86730115646196\n"
    )
    csv_example.write(
        "30.03790600092315,-92.86845640697538,30.0377475921359,-92.86728394049267\n"
    )
    csv_example.write(
        "30.0379404991904,-92.86844485391589,30.03778027570281,-92.86726385834064\n"
    )
    csv_example.write(
        "30.03796197755238,-92.86844283088163,30.03779189842327,-92.86725099533921\n"
    )
    csv_example.write(
        "30.03801823414788,-92.86842918514924,30.03782231186275,-92.86723594951347\n"
    )
    csv_example.write(
        "30.03804707600122,-92.8684264587786,30.03785992478739,-92.86721837516968\n"
    )
    csv_example.write(
        "30.03807720971334,-92.86843197572428,30.0378789421227,-92.86721621096019\n"
    )
    csv_example.write(
        "30.03811467808153,-92.86843682562265,30.03791228279507,-92.86720907194727\n"
    )
    csv_example.write(
        "30.03814498173742,-92.86844237100571,30.03794600661214,-92.86720200245374\n"
    )
    csv_example.write(
        "30.03817536147593,-92.8684479304092,30.03798495119786,-92.86719775057487\n"
    )
    csv_example.write(
        "30.03821313704282,-92.86845282481077,30.03800676992721,-92.86719028007494\n"
    )
    csv_example.write(
        "30.03825342965967,-92.86847428143609,30.03803846552586,-92.86718833685659\n"
    )
    csv_example.write(
        "30.03827667158946,-92.8684805380621,30.038070336302,-92.86718638873742\n"
    )
    csv_example.write(
        "30.03831604066361,-92.86849386447184,30.03810236991961,-92.8671844310125\n"
    )
    csv_example.write(
        "30.03834805225929,-92.8685078614063,30.03812214148239,-92.86718218364435\n"
    )
    csv_example.write(
        "30.03839386704537,-92.86851230357081,30.03816179178459,-92.86717763639089\n"
    )
    csv_example.write(
        "30.03841988914808,-92.86853539844006,30.03818675848181,-92.86717816057062\n"
    )
    csv_example.write(
        "30.03845220839587,-92.86854953231291,30.0382094597554,-92.86718407029464\n"
    )
    csv_example.write(
        "30.03849208414191,-92.86856303294287,30.03825237810393,-92.8671877169286\n"
    )
    csv_example.write(
        "30.03852581421953,-92.86858562531111,30.03828804838585,-92.86719396008066\n"
    )
    csv_example.write(
        "30.03856087361126,-92.86861668659327,30.03832112388602,-92.86719194760462\n"
    )
    csv_example.write(
        "30.03858722679031,-92.86864003436845,30.03833392357112,-92.86719222755683\n"
    )
    csv_example.write(
        "30.03860731406331,-92.86867247414084,30.03839111275187,-92.86721003627284\n"
    )
    csv_example.write(
        "30.03863500018695,-92.86870434523594,30.03839638367213,-92.86721292131487\n"
    )
    csv_example.write(
        "30.03865515006033,-92.86873687804601,30.03843825552388,-92.86722222041689\n"
    )
    csv_example.write(
        "30.03868167793267,-92.86876041579589,30.03845130885886,-92.86722253452459\n"
    )
    csv_example.write(
        "30.03870950676927,-92.86879245332642,30.03848527029074,-92.8672205677704\n"
    )
    csv_example.write(
        "30.03872850322085,-92.86881666316253,30.03851698707168,-92.8672241164427\n"
    )
    csv_example.write(
        "30.03875766565788,-92.86885726630467,30.03854655211037,-92.86723326483309\n"
    )
    csv_example.write(
        "30.03877666276569,-92.86888148606303,30.03862026050065,-92.86726620967568\n"
    )
    csv_example.write(
        "30.03880571581789,-92.86892199098078,30.03865632342846,-92.86727869796846\n"
    )
    csv_example.write(
        "30.03881057580054,-92.86895573904928,30.03868457907467,-92.86729387294024\n"
    )
    csv_example.write(
        "30.03883200000636,-92.86899686713974,30.03870921964943,-92.86730024269222\n"
    )
    csv_example.write(
        "30.03884461187669,-92.86903019245257,30.03875072670094,-92.86731568609291\n"
    )
    csv_example.write(
        "30.03886511195148,-92.86906324319553,30.03877564654279,-92.86732213791971\n"
    )
    csv_example.write(
        "30.03889339091125,-92.86909588775821,30.03880067051145,-92.86732861661189\n"
    )
    csv_example.write(
        "30.03891395928556,-92.8691290392502,30.03883147361094,-92.86733817362666\n"
    )
    csv_example.write(
        "30.03894219332696,-92.86916164440944,30.03890252651567,-92.86739112760645\n"
    )
    csv_example.write(
        "30.03895365145345,-92.86918664981395,30.03892714061405,-92.86740169386835\n"
    )
    csv_example.write(
        "30.03897536669806,-92.86922822573946,30.03895191306113,-92.8674123035866\n"
    )
    csv_example.write(
        "30.03899596255844,-92.86926145558016,30.03896435523498,-92.86741762727362\n"
    )
    csv_example.write(
        "30.03900888702535,-92.86929526208631,30.03898718424111,-92.86744436767843\n"
    )
    csv_example.write(
        "30.03901274608691,-92.86932094789329,30.03900597663849,-92.86745814130126\n"
    )
    csv_example.write(
        "30.03902696879657,-92.86936335533146,30.03903117870811,-92.86748038378246\n"
    )
    csv_example.write(
        "30.03903211680724,-92.86939761958632,30.0390692546796,-92.86750830934984\n"
    )
    csv_example.write(
        "30.03904764079987,-92.86944864349289,30.03909483994374,-92.86753089868694\n"
    )
    csv_example.write(
        "30.03905407974185,-92.86949149646611,30.03912920549564,-92.86755739071201\n"
    )
    csv_example.write(
        "30.03906567618592,-92.86951676053803,30.03916167329965,-92.86757734744737\n"
    )
    csv_example.write(
        "30.03907198862608,-92.86955947122379,30.0391879094806,-92.86761206756863\n"
    )
    csv_example.write(
        "30.03907956369222,-92.8696107239798,30.0392208857466,-92.86764410816275\n"
    )
    csv_example.write(
        "30.03908587636264,-92.86965343442992,30.0392630032826,-92.86768036285451\n"
    )
    csv_example.write(
        "30.03909471412766,-92.8697132296213,30.03928758908551,-92.86769714757115\n"
    )
    csv_example.write(
        "30.03909976392995,-92.86974739852738,30.03932802154535,-92.86771507520557\n"
    )
    csv_example.write(
        "30.03909698994024,-92.86978183679166,30.03938694645366,-92.86774126455028\n"
    )
    csv_example.write(
        "30.03910203828103,-92.86981599450749,30.03942101877742,-92.86775053854353\n"
    )
    csv_example.write(
        "30.03910052718155,-92.86985893625713,30.03947614245786,-92.86777519127938\n"
    )
    csv_example.write(
        "30.03910557386241,-92.86989308263631,30.0394946684683,-92.8677834669401\n"
    )
    csv_example.write(
        "30.03911062018326,-92.86992722928346,30.03952488470748,-92.86779087708544\n"
    )
    csv_example.write(
        "30.03911945207219,-92.86998698601275,30.03955774739142,-92.86780548601331\n"
    )
    csv_example.write(
        "30.03912576049705,-92.87002966931057,30.03960283089936,-92.86783161618325\n"
    )
    csv_example.write(
        "30.03912424189665,-92.87007252734911,30.03961711466036,-92.86783797465486\n"
    )
    csv_example.write(
        "30.0391227243192,-92.87011535793397,30.03963622410157,-92.86784648143612\n"
    )
    csv_example.write(
        "30.03912776760816,-92.8701494826617,30.03966328550484,-92.86787679319379\n"
    )
    csv_example.write(
        "30.03911839757744,-92.87019235655339,30.03968306320493,-92.86789783995742\n"
    )
    csv_example.write(
        "30.03911677344246,-92.87023494412877,30.03969579570697,-92.86792196091567\n"
    )
    csv_example.write(
        "30.03912172468002,-92.8702689026297,30.03971575606928,-92.86794321684663\n"
    )
    csv_example.write(
        "30.03911105592404,-92.87030305839299,30.03975685348629,-92.86801128945807\n"
    )
    csv_example.write(
        "30.03911067303312,-92.87035403989468,30.03977445407076,-92.86802549334332\n"
    )
    csv_example.write(
        "30.03910937876896,-92.87039702701047,30.03979438501045,-92.86803454048447\n"
    )
    csv_example.write(
        "30.03909243695339,-92.87043998613844,30.03982400803992,-92.86803544226025\n"
    )
    csv_example.write(
        "30.0390832367404,-92.87048270589699,30.03985564110056,-92.86801835281109\n"
    )
    csv_example.write(
        "30.03908826030524,-92.87051669949084,30.03988785878878,-92.86801396556025\n"
    )
    csv_example.write(
        "30.03909579742933,-92.87056768999723,30.03992630834446,-92.8680374876463\n"
    )
    csv_example.write(
        "30.03910458827101,-92.87062717807787,30.03995195068288,-92.86804898205951\n"
    )
    csv_example.write(
        "30.03910057219471,-92.87065266047445,30.03997023211907,-92.8680635184745\n"
    )
    csv_example.write(
        "30.03910684992285,-92.87069513911989,30.03998858894517,-92.86807811485392\n"
    )
    csv_example.write(
        "30.03909882137005,-92.87074602755715,30.0400000132067,-92.8681087345056\n"
    )
    csv_example.write(
        "30.03909606509405,-92.87077993470241,30.04000571575267,-92.86812409286011\n"
    )
    csv_example.write(
        "30.03908554377088,-92.87081375579798,30.04001753990794,-92.8681679679199\n"
    )
    csv_example.write(
        "30.03906853476852,-92.87085593187457,30.04001801510858,-92.86818104448764\n"
    )
    csv_example.write(
        "30.03905805214026,-92.87088964999604,30.04002704858947,-92.8682174217282\n"
    )
    csv_example.write(
        "30.03904757866825,-92.87092332470544,30.04003087346458,-92.86825150611507\n"
    )
    csv_example.write(
        "30.0390448481104,-92.87095706654783,30.04004571957029,-92.86830385273672\n"
    )
    csv_example.write(
        "30.03904211881091,-92.87099078707058,30.0400649252065,-92.8683324411857\n"
    )
    csv_example.write(
        "30.03903939147361,-92.87102448540725,30.04007891343865,-92.86835865954328\n"
    )
    csv_example.write(
        "30.03904438937907,-92.87105830516076,30.04009776950889,-92.86837415603131\n"
    )
    csv_example.write(
        "30.0390446202305,-92.87116433856652,30.04012743931716,-92.86839480861163\n"
    )
    csv_example.write(
        "30.03904091120966,-92.87119129688267,30.04013817356334,-92.86839990875252\n"
    )
    csv_example.write(
        "30.03904219484274,-92.87125201062871,30.04015672997623,-92.8684021322278\n"
    )
    csv_example.write(
        "30.03904968114703,-92.87130267118744,30.04018017813587,-92.86839345241921\n"
    )
    csv_example.write(
        "30.03905342393263,-92.87132800164021,30.04021215220376,-92.86839533371352\n"
    )
    csv_example.write(
        "30.03905841492728,-92.87136177544753,30.04024165281272,-92.86840268718971\n"
    )
    csv_example.write(
        "30.03906590084196,-92.87141243625501,30.04026331746588,-92.86841298218424\n"
    )
    csv_example.write(
        "30.03906343485236,-92.87144773878224,30.04028658925512,-92.86845059015489\n"
    )
    csv_example.write(
        "30.03903863716617,-92.87148756368896,30.04032584712919,-92.86849626235285\n"
    )
    csv_example.write(
        "30.03901262742241,-92.87151887602514,30.04034061930985,-92.86852350233842\n"
    )
    csv_example.write(
        "30.03898798869308,-92.87155850037921,30.04036479368472,-92.86856189553686\n"
    )
    csv_example.write(
        "30.03897076300207,-92.87159656049529,30.04038250704807,-92.86858389193426\n"
    )
    csv_example.write(
        "30.03895971188241,-92.87162469172533,30.04040361803109,-92.86861433710823\n"
    )
    csv_example.write(
        "30.03896467464088,-92.87165827199034,30.04041007896771,-92.86863103713611\n"
    )
    csv_example.write(
        "30.0389708781104,-92.87170024728368,30.04043431734399,-92.86867008103592\n"
    )
    csv_example.write(
        "30.03897584122326,-92.87173382762845,30.04046443443018,-92.86871218786528\n"
    )
    csv_example.write(
        "30.03898328538607,-92.87178419795607,30.04047435036249,-92.86873762715821\n"
    )
    csv_example.write(
        "30.03898824848085,-92.87181777846031,30.04049672370791,-92.86878307879657\n"
    )
    csv_example.write(
        "30.03898706076258,-92.87186114251475,30.04050882837436,-92.86880298791257\n"
    )
    csv_example.write(
        "30.0389932636782,-92.87190310461477,30.04052229813766,-92.86883736720796\n"
    )
    csv_example.write(
        "30.03899083791978,-92.87193803797521,30.04054122601848,-92.86887472276894\n"
    )
    csv_example.write(
        "30.03898103084755,-92.87197430029403,30.04055596957218,-92.86893813032054\n"
    )
    csv_example.write(
        "30.03897860866707,-92.87200917789282,30.04055498982612,-92.86897272793932\n"
    )
    csv_example.write(
        "30.03897866409304,-92.87206079187474,30.04056572700259,-92.86901343311006\n"
    )
    csv_example.write(
        "30.03897872006824,-92.87211237294997,30.04056984133729,-92.86903672600361\n"
    )
    csv_example.write(
        "30.03898367096958,-92.8721458791174,30.04059543290904,-92.86907820766417\n"
    )
    csv_example.write(
        "30.03898862193741,-92.87217938525136,30.0406202847582,-92.86910527106953\n"
    )
    csv_example.write(
        "30.03900218887256,-92.8722199964058,30.04064021472614,-92.86914411396791\n"
    )
    csv_example.write(
        "30.03901452582124,-92.87225225159715,30.04066268461225,-92.8691773098723\n"
    )
    csv_example.write(
        "30.03903550633453,-92.8722916616335,30.04067305667865,-92.86920428325494\n"
    )
    csv_example.write(
        "30.03904662606122,-92.87231558047333,30.04067575677842,-92.86924887386203\n"
    )
    csv_example.write(
        "30.039060233127,-92.87235629946207,30.04068271730201,-92.86926699070062\n"
    )
    csv_example.write(
        "30.0390738491946,-92.87239704451828,30.04069311835415,-92.8692942157269\n"
    )
    csv_example.write(
        "30.03907881113395,-92.87243062514339,30.04071028607949,-92.86933969683707\n"
    )
    csv_example.write(
        "30.03908625423268,-92.87248099637296,30.04072452183968,-92.86937643223753\n"
    )
    csv_example.write(
        "30.03908379524736,-92.87251575729393,30.04073139869662,-92.8693947549458\n"
    )
    csv_example.write(
        "30.03907392541355,-92.87255166439104,30.040754087839,-92.86942901049086\n"
    )
    csv_example.write(
        "30.03906406770598,-92.87258752584947,30.04077095900042,-92.86946018523152\n"
    )
    csv_example.write(
        "30.03904806730586,-92.8726328587139,30.0407842059444,-92.86948212886988\n"
    )
    csv_example.write(
        "30.03904562682976,-92.87266748351483,30.04080100289121,-92.86951345560406\n"
    )
    csv_example.write(
        "30.03904442435853,-92.87271045496296,30.04080267021805,-92.86954395981772\n"
    )
    csv_example.write(
        "30.03903460732428,-92.87274613628558,30.04079950916671,-92.86958664043148\n"
    )
    csv_example.write(
        "30.03903340950287,-92.87278904192533,30.0407916334067,-92.86960451940584\n"
    )
    csv_example.write(
        "30.03903097745423,-92.87282356245385,30.04077062990278,-92.86965219967864\n"
    )
    csv_example.write(
        "30.03902854727263,-92.87285806115496,30.04076275330672,-92.86967008114229\n"
    )
    csv_example.write(
        "30.03902858668206,-92.87290924350651,30.04073989611663,-92.86968691548373\n"
    )
    csv_example.write(
        "30.0390273928315,-92.87295204364385,30.04068885909359,-92.86968021525821\n"
    )
    csv_example.write(
        "30.03902496578787,-92.87298646897092,30.04064445229218,-92.86967711914612\n"
    )
    csv_example.write(
        "30.03902253990456,-92.87302087287331,30.04062154492302,-92.86975183180986\n"
    )
    csv_example.write(
        "30.03901276465828,-92.87305625680027,30.04061529622927,-92.86977790804409\n"
    )
    csv_example.write(
        "30.03900300164621,-92.873091595932,30.04061574482945,-92.86980078613887\n"
    )
    csv_example.write(
        "30.03898714974755,-92.87313619508747,30.04063852989454,-92.86980913617255\n"
    )
    csv_example.write(
        "30.0389835121284,-92.8731621409806,30.04065659007787,-92.8698043439955\n"
    )
    csv_example.write(
        "30.03898966158741,-92.87320375996482,30.04068596453607,-92.8697980301356\n"
    )
    csv_example.write(
        "30.03899580798011,-92.87324537592889,30.04070414148664,-92.8698049070255\n"
    )
    csv_example.write(
        "30.03900805986226,-92.87327773960364,30.0407180870536,-92.8698216403522\n"
    )
    csv_example.write(
        "30.03901909414774,-92.87330180012823,30.04073001639013,-92.86984333014779\n"
    )
    csv_example.write(
        "30.03903259381619,-92.87334253488015,30.04074007686038,-92.8698817039283\n"
    )
    csv_example.write(
        "30.03904487055662,-92.87337496136143,30.04074522069556,-92.86990682251133\n"
    )
    csv_example.write(
        "30.03904979621462,-92.87340829869773,30.04074574227509,-92.86993023261985\n"
    )
    csv_example.write(
        "30.03907067944356,-92.87344821585289,30.04074188864842,-92.8699636336197\n"
    )
    csv_example.write(
        "30.03907560833508,-92.87348157422517,30.04073775202549,-92.86998534766951\n"
    )
    csv_example.write(
        "30.03908176962589,-92.87352327242291,30.04071557858567,-92.87002334234592\n"
    )
    csv_example.write(
        "30.03908669865115,-92.87355663076961,30.04070441002186,-92.87003643509665\n"
    )
    csv_example.write(
        "30.03907811998966,-92.87359998863312,30.04068209717893,-92.87006258295823\n"
    )
    csv_example.write(
        "30.03907568184821,-92.87363414457671,30.0406596334641,-92.87008876498474\n"
    )
    csv_example.write(
        "30.03905976632367,-92.87367821647987,30.04065080267485,-92.87010866316193\n"
    )
    csv_example.write(
        "30.03905856608397,-92.87372062587571,30.04064459938749,-92.8701472059615\n"
    )
    csv_example.write(
        "30.03906963183693,-92.87379551655337,30.04064944257444,-92.87016089991806\n"
    )
    csv_example.write(
        "30.03907577932301,-92.87383712275997,30.04065915618962,-92.87018836593201\n"
    )
    csv_example.write(
        "30.03908315651369,-92.87388704989492,30.0406779396043,-92.87020785497288\n"
    )
    csv_example.write(
        "30.03909789256507,-92.87393625618998,30.04069436917982,-92.87023253048557\n"
    )
    csv_example.write(
        "30.03911754900158,-92.8739681274709,30.04071341161043,-92.87026425873232\n"
    )
    csv_example.write(
        "30.0391298485824,-92.87400074145833,30.0407161216224,-92.87028324577939\n"
    )
    csv_example.write(
        "30.03913846594441,-92.87405906406202,30.04071435184225,-92.8703123540885\n"
    )
    csv_example.write(
        "30.03914462130013,-92.8741007230344,30.04071709011613,-92.87033141533669\n"
    )
    csv_example.write(
        "30.03913478398817,-92.8741353702698,30.04071535627376,-92.87036061696323\n"
    )
    csv_example.write(
        "30.03911023183903,-92.87417127002333,30.04071152017471,-92.87039489096868\n"
    )
    csv_example.write(
        "30.03907840156228,-92.87420771449891,30.04070984325458,-92.87042419523512\n"
    )
    csv_example.write(
        "30.03903204869801,-92.87424528930238,30.04069862151545,-92.87044949666047\n"
    )
    csv_example.write(
        "30.03901502025963,-92.87428023079723,30.0406874122216,-92.87047479536724\n"
    )
    csv_example.write(
        "30.03901386179864,-92.87432224694987,30.04067831609001,-92.87049506196422\n"
    )
    csv_example.write(
        "30.03901512760484,-92.87438074615768,30.04066932533422,-92.87051530614171\n"
    )
    csv_example.write(
        "30.03902123832816,-92.87442210532114,30.04066503885804,-92.87053762812715\n"
    )
    csv_example.write(
        "30.03902857146609,-92.87447173303038,30.04065852498566,-92.87056503217545\n"
    )
    csv_example.write(
        "30.03904075794409,-92.87450427998212,30.040665844399,-92.8705865593349\n"
    )
    csv_example.write(
        "30.03904809319025,-92.87455392591114,30.04068022979603,-92.87060518119758\n"
    )
    csv_example.write(
        "30.03905420610315,-92.87459529740067,30.04068545010959,-92.87063191187386\n"
    )
    csv_example.write(
        "30.03906031794068,-92.87463666973764,30.04069068574673,-92.87065872087726\n"
    )
    csv_example.write(
        "30.03906765277359,-92.87468631610786,30.04067461970562,-92.87068204022808\n"
    )
    csv_example.write(
        "30.03907132039149,-92.87471113975491,30.04065141153924,-92.87069589781564\n"
    )
    csv_example.write(
        "30.03908474737571,-92.87475204957138,30.04062835528894,-92.87070970848566\n"
    )
    csv_example.write(
        "30.03908841633167,-92.87477688061712,30.04059384335608,-92.87072419241035\n"
    )
    csv_example.write(
        "30.0390884359817,-92.87482698203364,30.04057339490226,-92.87074515707931\n"
    )
    csv_example.write(
        "30.03907870182903,-92.87486093627156,30.04056441712441,-92.87076540923965\n"
    )
    csv_example.write(
        "30.03906775845425,-92.87488658378334,30.04055577089462,-92.87081034770981\n"
    )
    csv_example.write(
        "30.03903497411737,-92.8749134320998,30.04055144110757,-92.87083285027772\n"
    )
    csv_example.write(
        "30.03900950380624,-92.87493971162857,30.04054727045145,-92.87086776737138\n"
    )
    csv_example.write(
        "30.03899011358995,-92.87495727229474,30.04054532322579,-92.87089767078287\n"
    )
    csv_example.write(
        "30.03897213372384,-92.87498330662173,30.04055031389017,-92.87092482457882\n"
    )
    csv_example.write(
        "30.03896132517577,-92.87500876654506,30.04054836497912,-92.87095485497888\n"
    )
    csv_example.write(
        "30.03892887980985,-92.87503528338475,30.04054867909518,-92.87097984487346\n"
    )
    csv_example.write(
        "30.03890372265391,-92.87506135537816,30.04054899375662,-92.87100488316162\n"
    )
    csv_example.write(
        "30.03889298299856,-92.87508665587623,30.04055402073518,-92.87103231126704\n"
    )
    csv_example.write(
        "30.03889184917174,-92.87512795213473,30.04056135024059,-92.87105470335118\n"
    )
    csv_example.write(
        "30.03888233596808,-92.87516137241528,30.04057773566512,-92.87106925263032\n"
    )
    csv_example.write(
        "30.03888717308058,-92.87519411169963,30.04059635996487,-92.87107870797094\n"
    )
    csv_example.write(
        "30.03888483874433,-92.87522716544503,30.04061539409799,-92.87108823421242\n"
    )
    csv_example.write(
        "30.03888250177808,-92.87526018878944,30.04062286491758,-92.87111086696783\n"
    )
    csv_example.write(
        "30.03888016684259,-92.87529319200132,30.0406021504519,-92.87114453821336\n"
    )
    csv_example.write(
        "30.03886351593782,-92.87532672650718,30.04057922470062,-92.8711706378686\n"
    )
    csv_example.write(
        "30.03883734518925,-92.87534414629711,30.04053733872035,-92.87123955160811\n"
    )
    csv_example.write(
        "30.03881244356839,-92.87536967192102,30.04053504267699,-92.8712447051843\n"
    )
    csv_example.write(
        "30.03880181974744,-92.87539462596173,30.04051024339668,-92.87126122203962\n"
    )
    csv_example.write(
        "30.03880783507951,-92.87543534455443,30.04049129111078,-92.87129072098394\n"
    )
    csv_example.write(
        "30.03882688858921,-92.87546745633797,30.04048444434572,-92.87130612891978\n"
    )
    csv_example.write(
        "30.0388388323652,-92.87549982965716,30.04047598074337,-92.87133830967416\n"
    )
    csv_example.write(
        "30.03885078366819,-92.87553222237017,30.04047784853448,-92.8713733773501\n"
    )
    csv_example.write(
        "30.03885801061283,-92.87558114494641,30.04047619509743,-92.87139023123115\n"
    )
    csv_example.write(
        "30.03885571176503,-92.87561397017078,30.04048034684095,-92.87142029547235\n"
    )
    csv_example.write(
        "30.03885339051366,-92.87564679590271,30.04050081417496,-92.87146664579265\n"
    )
    csv_example.write(
        "30.0388522871918,-92.87568771081958,30.04051197480809,-92.8714814010916\n"
    )
    csv_example.write(
        "30.038841740688,-92.87576146429303,30.04054354331254,-92.87149031124387\n"
    )
    csv_example.write(
        "30.03883943167466,-92.87579415526088,30.04056441722591,-92.87149644272962\n"
    )
    csv_example.write(
        "30.03883001259515,-92.87582694978526,30.04058480067621,-92.8715029317143\n"
    )
    csv_example.write(
        "30.03881230402084,-92.87585169236287,30.0406067398387,-92.87152094860174\n"
    )
    csv_example.write(
        "30.03880171650168,-92.87587628149102,30.04063257025626,-92.87155783271436\n"
    )
    csv_example.write(
        "30.03877818379654,-92.87590914961984,30.04063945360937,-92.87158342641612\n"
    )
    csv_example.write(
        "30.03876763602906,-92.875933658281,30.04064474419399,-92.87162645999848\n"
    )
    csv_example.write(
        "30.03875710175636,-92.87595813683194,30.04064769949106,-92.87167495111561\n"
    )
    csv_example.write(
        "30.03874777614427,-92.87599067950518,30.04064446325879,-92.87170984544781\n"
    )
    csv_example.write(
        "30.03875495239261,-92.87603924666109,30.04064195926678,-92.87175702424594\n"
    )
    csv_example.write(
        "30.03875268244373,-92.87607167279145,30.04064107412789,-92.87178678938245\n"
    )
    csv_example.write(
        "30.03875041418912,-92.87610407923115,30.04063189224322,-92.87180786023107\n"
    )
    csv_example.write(
        "30.03874814721532,-92.87613646551614,30.04061806304679,-92.87183949652619\n"
    )
    csv_example.write(
        "30.03872357954797,-92.87616080817351,30.04058852985231,-92.87187838682692\n"
    )
    csv_example.write(
        "30.03870370343571,-92.8761689389296,30.04055604915991,-92.87191017958678\n"
    )
    csv_example.write(
        "30.03866165947307,-92.87616898019635,30.04052831379913,-92.87193134654115\n"
    )
    csv_example.write(
        "30.03863608000971,-92.87618505441867,30.04051063779463,-92.87194367201023\n"
    )
    csv_example.write(
        "30.03861872049385,-92.87620914637105,30.04049360290508,-92.87196826492504\n"
    )
    csv_example.write(
        "30.03860376783066,-92.87624926156113,30.0404865658248,-92.87198407001382\n"
    )
    csv_example.write(
        "30.0386015595269,-92.87628135763906,30.04048012839736,-92.87201219391999\n"
    )
    csv_example.write(
        "30.03860057470537,-92.87632158672339,30.04048072861551,-92.87202452537724\n"
    )
    csv_example.write(
        "30.03860654567143,-92.87636187617257,30.04049345471634,-92.87206510111723\n"
    )
    csv_example.write(
        "30.0386124727836,-92.87640199937266,30.04049949652757,-92.87207927684474\n"
    )
    csv_example.write(
        "30.03861026455924,-92.87643403566543,30.04050624932213,-92.87210588514525\n"
    )
    csv_example.write(
        "30.03857876323958,-92.87646936273867,30.04049760879794,-92.87213947371744\n"
    )
    csv_example.write(
        "30.03853437443314,-92.87654634222416,30.04047523052061,-92.87216222076978\n"
    )
    csv_example.write(
        "30.03850837596299,-92.87658527336511,30.04044524004826,-92.87218833636211\n"
    )
    csv_example.write(
        "30.03849793426492,-92.8766218400802,30.04041766379783,-92.87220910228888\n"
    )
    csv_example.write(
        "30.03847976763208,-92.87665947877588,30.04038550797202,-92.87224034198424\n"
    )
    csv_example.write(
        "30.03846163600064,-92.87669704425215,30.04037080349655,-92.87225955200316\n"
    )
    csv_example.write(
        "30.03843457040791,-92.87672708716362,30.04034615773121,-92.87228737121066\n"
    )
    csv_example.write(
        "30.03842421714817,-92.87676342010845,30.04030928630283,-92.87232899006234\n"
    )
    csv_example.write(
        "30.03842156807453,-92.87679863684333,30.04028476977273,-92.87235666312166\n"
    )
    csv_example.write(
        "30.03842787420857,-92.87684130565412,30.0402706627012,-92.8723881932512\n"
    )
    csv_example.write(
        "30.03843291915594,-92.87687544090772,30.04026879301298,-92.87240592521471\n"
    )
    csv_example.write(
        "30.03844048646218,-92.87692664392671,30.04027307912609,-92.87245068856336\n"
    )
    csv_example.write(
        "30.0384211950166,-92.87695530548451,30.04027072809502,-92.8724559535958\n"
    )
    csv_example.write(
        "30.03840068215693,-92.87697539418225,30.04027519605596,-92.87250085726401\n"
    )
    csv_example.write(
        "30.03837506931608,-92.87701346080789,30.04028201610546,-92.87254066219249\n"
    )
    csv_example.write(
        "30.03835464694564,-92.87703344802581,30.04028654325432,-92.87258591375674\n"
    )
    csv_example.write(
        "30.03831902441092,-92.8770553615627,30.04028774019494,-92.87261123589472\n"
    )
    csv_example.write(
        "30.03828476749106,-92.87708567502959,30.04028893952332,-92.87263661143558\n"
    )
    csv_example.write(
        "30.03825694091086,-92.87710647203706,30.04029660440287,-92.87268966122744\n"
    )
    csv_example.write(
        "30.03822910905812,-92.8771271691358,30.04030136580992,-92.87273549576607\n"
    )
    csv_example.write(
        "30.03819496256005,-92.87715712229422,30.04031969524017,-92.87279346029861\n"
    )
    csv_example.write(
        "30.03817112127567,-92.87720302400837,30.0403285963132,-92.87281613785152\n"
    )
    csv_example.write(
        "30.03816984948241,-92.87724606996242,30.04034520562327,-92.87283575722489\n"
    )
    csv_example.write(
        "30.03815982654486,-92.87728157033636,30.04034819362682,-92.87284335807412\n"
    )
    csv_example.write(
        "30.0381498166995,-92.87731702621055,30.04037863016627,-92.87287523915346\n"
    )
    csv_example.write(
        "30.03813365543585,-92.87736177825741,30.04040382374013,-92.87290507067759\n"
    )
    csv_example.write(
        "30.03812364808165,-92.87739710547311,30.04042937870979,-92.87293507104732\n"
    )
    csv_example.write(
        "30.03812116519314,-92.87743157096355,30.04043849243724,-92.87295829869826\n"
    )
    csv_example.write(
        "30.03811742615192,-92.87745760790753,30.04045419589588,-92.87301042849639\n"
    )
    csv_example.write(
        "30.03810989467375,-92.87750958580777,30.04045845143293,-92.87304479720537\n"
    )
    csv_example.write(
        "30.03810111266312,-92.87755308621389,30.04046027517653,-92.87308473663741\n"
    )
    csv_example.write(
        "30.03809861169408,-92.87758741137029,30.04046218096587,-92.87312479706473\n"
    )
    csv_example.write(
        "30.03810236654311,-92.87761258690941,30.04045869285989,-92.87316253193511\n"
    )
    csv_example.write(
        "30.03809485501767,-92.87766437367736,30.04045526139807,-92.8732003491814\n"
    )
    csv_example.write(
        "30.03809234613298,-92.87769861908468,30.0404524920555,-92.87325173490478\n"
    )
    csv_example.write(
        "30.03808360880351,-92.87774192900858,30.04045450598895,-92.87329227603408\n"
    )
    csv_example.write(
        "30.03808360439772,-92.87779286748641,30.04045407251133,-92.8733384579435\n"
    )
    csv_example.write(
        "30.03807984015302,-92.87781863806021,30.04045306588013,-92.87337117580294\n"
    )
    csv_example.write(
        "30.03807107959639,-92.87786176656145,30.04044953769237,-92.87340948302052\n"
    )
    csv_example.write(
        "30.03807842619592,-92.87791182620212,30.0404595391809,-92.87344758146523\n"
    )
    csv_example.write(
        "30.0380758834879,-92.87794586086062,30.04046891363672,-92.87347210289242\n"
    )
    csv_example.write(
        "30.03808078497297,-92.87797922397357,30.04047517988313,-92.87348849396403\n"
    )
    csv_example.write(
        "30.0380932254086,-92.87806285566531,30.04048528386001,-92.87352694277983\n"
    )
    csv_example.write(
        "30.03810298139524,-92.8781295212366,30.04050354316497,-92.87356268640983\n"
    )
    csv_example.write(
        "30.03809924926695,-92.878155186923,30.04050810019361,-92.87359874748537\n"
    )
    csv_example.write(
        "30.038102974186,-92.87818026148886,30.04051254979226,-92.87363490211186\n"
    )
    csv_example.write(
        "30.03811163013139,-92.87823873039169,30.04051578942839,-92.87370474790733\n"
    )
    csv_example.write(
        "30.0381264909009,-92.87828828222843,30.04052925042567,-92.87375251094853\n"
    )
    csv_example.write(
        "30.03813271041975,-92.8783301137878,30.04053636488781,-92.87378354547454\n"
    )
    csv_example.write(
        "30.03814641367896,-92.87837144309066,30.0405442218519,-92.87382884539279\n"
    )
    csv_example.write(
        "30.0381709787538,-92.87843692532343,30.04055933157163,-92.87390576336581\n"
    )
    csv_example.write(
        "30.03819107545281,-92.87846962207881,30.04056335718419,-92.87392867072562\n"
    )
    csv_example.write(
        "30.03821105307012,-92.87850219389979,30.0405747130016,-92.87398331320186\n"
    )
    csv_example.write(
        "30.03822225198185,-92.87852681367713,30.04059037156356,-92.87401240631954\n"
    )
    csv_example.write(
        "30.03823592397443,-92.8785681897247,30.0406002742214,-92.87403859725852\n"
    )
    csv_example.write(
        "30.03824960432512,-92.87860959164257,30.04061604935136,-92.87406792403594\n"
    )
    csv_example.write(
        "30.03826330509287,-92.87865104279095,30.04064192569406,-92.87412387115036\n"
    )
    csv_example.write(
        "30.03826700994304,-92.87867617408314,30.04065535323814,-92.87415932973373\n"
    )
    csv_example.write(
        "30.0382882664427,-92.87871725367162,30.04066292324114,-92.87419180145636\n"
    )
    csv_example.write(
        "30.03829320932105,-92.87875078303517,30.04067306265208,-92.87421859784642\n"
    )
    csv_example.write(
        "30.03829938800821,-92.87879269473109,30.04068068773909,-92.87425127806131\n"
    )
    csv_example.write(
        "30.03831188494473,-92.87882585471141,30.04068238225914,-92.87428085975876\n"
    )
    csv_example.write(
        "30.03831559302528,-92.87885100856938,30.04067981138964,-92.87428665309413\n"
    )
    csv_example.write(
        "30.03833052695394,-92.87890090948366,30.0406796857532,-92.87433692503028\n"
    )
    csv_example.write(
        "30.03834355846607,-92.87894146905599,30.04068132033451,-92.87436665963\n"
    )
    csv_example.write(
        "30.03835776013934,-92.87898373520065,30.04068201608453,-92.87443214952278\n"
    )
    csv_example.write(
        "30.03836999432051,-92.87901657301502,30.04067507985654,-92.87446458725525\n"
    )
    csv_example.write(
        "30.03837499474629,-92.87905022238864,30.04067494532734,-92.87451543711165\n"
    )
    csv_example.write(
        "30.03838769571561,-92.87908376774064,30.04066962674558,-92.87457814934412\n"
    )
    csv_example.write(
        "30.03840018823966,-92.87911700162977,30.04066867458964,-92.87461422648488\n"
    )
    csv_example.write(
        "30.03841233054685,-92.87914973309232,30.04066607870908,-92.87462007862182\n"
    )
    csv_example.write(
        "30.03842505664939,-92.87918331341092,30.0406598603728,-92.87466792723079\n"
    )
    csv_example.write(
        "30.03843787575445,-92.8792170603306,30.04066236500585,-92.87471356936905\n"
    )
    csv_example.write(
        "30.03846585098855,-92.87925021139409,30.04067951831825,-92.87476050790228\n"
    )
    csv_example.write(
        "30.03849251735558,-92.87927481795099,30.04068985652347,-92.87478879807175\n"
    )
    csv_example.write(
        "30.03851923400089,-92.87929947004481,30.04070369542517,-92.87482666729105\n"
    )
    csv_example.write(
        "30.03855245834544,-92.87931554040738,30.04071759697305,-92.8748647080541\n"
    )
    csv_example.write(
        "30.03859205731843,-92.87932273073419,30.04072457144737,-92.87488379325039\n"
    )
    csv_example.write(
        "30.03862282728745,-92.87932171968149,30.04074291563901,-92.8749472362916\n"
    )
    csv_example.write(
        "30.03866014726026,-92.87931196457875,30.04075085423811,-92.87498212473523\n"
    )
    csv_example.write(
        "30.03868983869152,-92.87930243558912,30.04075615734109,-92.87502309313598\n"
    )
    csv_example.write(
        "30.03871834948706,-92.87928437596989,30.04076412149627,-92.87505821680814\n"
    )
    csv_example.write(
        "30.03873789337424,-92.87925802405452,30.04077297419701,-92.8751092074708\n"
    )
    csv_example.write(
        "30.0387665307864,-92.87923986545096,30.04077207958088,-92.87514678089073\n"
    )
    csv_example.write(
        "30.03879524231456,-92.8792216606699,30.04076853214111,-92.87519045621879\n"
    )
    csv_example.write(
        "30.03882781744569,-92.87922905944728,30.04076496928447,-92.87523422682072\n"
    )
    csv_example.write(
        "30.03885514896688,-92.8792538786717,30.04075436104899,-92.8752583247566\n"
    )
    csv_example.write(
        "30.03889040785126,-92.87927847670089,30.04075257409246,-92.87528026386811\n"
    )
    csv_example.write(
        "30.03891123873405,-92.87931223882077,30.04075169385028,-92.87531820750526\n"
    )
    csv_example.write(
        "30.03892419876562,-92.87934629361199,30.04076585887476,-92.8753580479769\n"
    )
    csv_example.write(
        "30.03893716738568,-92.87938036946991,30.04077921441302,-92.8753819987798\n"
    )
    csv_example.write(
        "30.03895014421113,-92.87941446841835,30.04078369459432,-92.87540812412179\n"
    )
    csv_example.write(
        "30.03895521648986,-92.8794488046648,30.04078909672409,-92.87545046360968\n"
    )
    csv_example.write(
        "30.03896947296233,-92.87949152344578,30.04078824541919,-92.87548891245399\n"
    )
    csv_example.write(
        "30.03895871793353,-92.87952625002968,30.04077753330089,-92.87551325264253\n"
    )
    csv_example.write(
        "30.0389479772149,-92.87956093236082,30.04076062924713,-92.87559339021723\n"
    )
    csv_example.write(
        "30.03893725036727,-92.87959556967405,30.04077039105149,-92.87563154335415\n"
    )
    csv_example.write(
        "30.03893442331335,-92.879630006002,30.04077354644794,-92.87567299992467\n"
    )
    csv_example.write(
        "30.03892371552522,-92.87966456432945,30.04078098141898,-92.87570477424578\n"
    )
    csv_example.write(
        "30.03892089568868,-92.87969894544133,30.04079749075562,-92.87572851755804\n"
    )
    csv_example.write(
        "30.03892721633333,-92.87974173853436,30.0408138436508,-92.87574062974699\n"
    )
    csv_example.write(
        "30.03892439595137,-92.87977608280428,30.04083271328569,-92.87575957426704\n"
    )
    csv_example.write(
        "30.03892939770302,-92.87981022691022,30.04085610657038,-92.87576861362575\n"
    )
    csv_example.write(
        "30.03893435216411,-92.87984430293248,30.04087516746643,-92.87578771552261\n"
    )
    csv_example.write(
        "30.03893266756884,-92.87988696608126,30.04089682403575,-92.87581377270959\n"
    )
    csv_example.write(
        "30.03894549837401,-92.87992096412133,30.04089542463004,-92.8758545300285\n"
    )
    csv_example.write(
        "30.03899287654387,-92.87992059849257,30.04089485171345,-92.87593135263334\n"
    )
    csv_example.write(
        "30.03902208154448,-92.8799032634451,30.04087918422486,-92.87596667436098\n"
    )
    csv_example.write(
        "30.03904218638125,-92.87987742244724,30.04086351673591,-92.87600199625935\n"
    )
    csv_example.write(
        "30.03906108878705,-92.87984296715473,30.04085008712299,-92.87603227298808\n"
    )
    csv_example.write(
        "30.03907203221437,-92.87980850350785,30.04083439236094,-92.87606760323141\n"
    )
    csv_example.write(
        "30.03909889065989,-92.87977368297365,30.04081622332349,-92.87609589913096\n"
    )
    csv_example.write(
        "30.0391283371979,-92.87975598542847,30.04080257664416,-92.87611407627442\n"
    )
    csv_example.write(
        "30.03915786045055,-92.87973824116368,30.04079564348008,-92.87611712086289\n"
    )
    csv_example.write(
        "30.03918196996369,-92.87973787596718,30.04075906006388,-92.87614938606919\n"
    )
    csv_example.write(
        "30.03923456904248,-92.87971101421424,30.04072482009925,-92.87617651508347\n"
    )
    csv_example.write(
        "30.03928314583068,-92.87971022622928,30.04069531603248,-92.87620556974908\n"
    )
    csv_example.write(
        "30.03931563815441,-92.87970970032518,30.0406616169747,-92.87625661042107\n"
    )
    csv_example.write(
        "30.0393645361238,-92.8797089070939,30.04065939446387,-92.87626161849768\n"
    )
    csv_example.write(
        "30.0394054331897,-92.87970824314574,30.04063939055123,-92.87630669061322\n"
    )
    csv_example.write(
        "30.03945727257809,-92.87972493636627,30.04062605477136,-92.87633673879515\n"
    )
    csv_example.write(
        "30.03950106032956,-92.87974181849505,30.04061494120422,-92.87636177897241\n"
    )
    csv_example.write(
        "30.03953541828677,-92.87975010123633,30.04061063509394,-92.87638392017838\n"
    )
    csv_example.write(
        "30.03956986738782,-92.87975840573888,30.04060201043781,-92.87642826605236\n"
    )
    csv_example.write(
        "30.0396127330473,-92.87976661839977,30.04059586216454,-92.8764920893461\n"
    )
    csv_example.write(
        "30.03965704382983,-92.87978367165363,30.04059389554127,-92.87652157814726\n"
    )
    csv_example.write(
        "30.03970019619328,-92.87979195186598,30.04059415921336,-92.87654608937967\n"
    )
    csv_example.write(
        "30.03973508718188,-92.87980036837168,30.04059192490654,-92.87655112391118\n"
    )
    csv_example.write(
        "30.03977850661909,-92.87980870516094,30.04059008061512,-92.87659302867037\n"
    )
    csv_example.write(
        "30.03981491553421,-92.87982603381019,30.04058573335389,-92.87661543064976\n"
    )
    csv_example.write(
        "30.03985011203066,-92.87983453002389,30.04057690236996,-92.87664794791262\n"
    )
    csv_example.write(
        "30.03987950237033,-92.87986089124261,30.04057266659495,-92.87668276702924\n"
    )
    csv_example.write(
        "30.03992471025417,-92.87987827444674,30.04056841543158,-92.87671765363396\n"
    )
    csv_example.write(
        "30.03996279095396,-92.87990466296246,30.040559543955,-92.87675029807704\n"
    )
    csv_example.write(
        "30.03998980563144,-92.87991338292791,30.04055515913817,-92.87677285132438\n"
    )
    csv_example.write(
        "30.0400387658278,-92.87989516212093,30.04054852132052,-92.87680048978123\n"
    )
    csv_example.write(
        "30.04009051361477,-92.87989472423068,30.04053727826221,-92.87682580734287\n"
    )
    csv_example.write(
        "30.04013247180897,-92.87988538311606,30.04052837906466,-92.87685855018717\n"
    )
    csv_example.write(
        "30.04015849712447,-92.87988513781896,30.04051948346683,-92.87689132617257\n"
    )
    csv_example.write(
        "30.04020807812757,-92.87986667114885,30.04050824653591,-92.87691667072659\n"
    )
    csv_example.write(
        "30.04024037096537,-92.87984832624345,30.04049484942274,-92.87695963591111\n"
    )
    csv_example.write(
        "30.04027140333227,-92.8798208864599,30.04049060875777,-92.87700752158003\n"
    )
    csv_example.write(
        "30.04029239868052,-92.87978444196936,30.04048393552567,-92.87703537150901\n"
    )
    csv_example.write(
        "30.04030463796733,-92.87974804814925,30.04048193755948,-92.87711633289358\n"
    )
    csv_example.write(
        "30.04033451723577,-92.87971133045784,30.04048910267024,-92.87715190564974\n"
    )
    csv_example.write(
        "30.04035698041451,-92.8796837259611,30.04049859479498,-92.87718251404512\n"
    )
    csv_example.write(
        "30.04038968554156,-92.87966498576279,30.0405057388745,-92.8772055510524\n"
    )
    csv_example.write(
        "30.04042648978636,-92.87967344518785,30.04052445857469,-92.87722866524611\n"
    )
    csv_example.write(
        "30.04046338985308,-92.87968192258435,30.04055009710823,-92.87723643780824\n"
    )
    csv_example.write(
        "30.04049146761895,-92.87969057327307,30.04057357162831,-92.877249410094\n"
    )
    csv_example.write(
        "30.0405334522554,-92.87967156862841,30.04060403625776,-92.87724691858475\n"
    )
    csv_example.write(
        "30.0405280625418,-92.87963506394637,30.04063454660662,-92.87724437825908\n"
    )
    csv_example.write(
        "30.04052133217238,-92.87958943891587,30.04065793465952,-92.87723140082926\n"
    )
    csv_example.write(
        "30.04052491250253,-92.87955275499709,30.04069554031034,-92.87721316684414\n"
    )
    csv_example.write(
        "30.04053880466983,-92.87952497290297,30.04070719274404,-92.87720011820099\n"
    )
    csv_example.write(
        "30.0405796808797,-92.87949651479549,30.04073860651264,-92.87718460374346\n"
    )
    csv_example.write(
        "30.04062973014693,-92.87946773490933,30.04077195486231,-92.877163635548\n"
    )
    csv_example.write(
        "30.04067091670386,-92.87943906400368,30.04079816210116,-92.87714521993114\n"
    )
    csv_example.write(
        "30.04070450381412,-92.87941972825755,30.04083920171863,-92.87713450898303\n"
    )
    csv_example.write(
        "30.0407395459025,-92.8794095513953,30.04086098969388,-92.87712650028956\n"
    )
    csv_example.write(
        "30.04079751600965,-92.87937049465147,30.0409147429548,-92.87711559722653\n"
    )
    csv_example.write(
        "30.04083249649208,-92.87935996543928,30.04098143715198,-92.87710451455999\n"
    )
    csv_example.write(
        "30.04086414379317,-92.87932213608269,30.04101625476939,-92.87709627624308\n"
    )
    csv_example.write(
        "30.04089590441416,-92.87928420887681,30.04104376377412,-92.87709072182871\n"
    )
    csv_example.write(
        "30.04091963710326,-92.87925558101411,30.04106387617694,-92.87708787650247\n"
    )
    csv_example.write(
        "30.0409419144864,-92.87921750139387,30.04110425597596,-92.87708215270865\n"
    )
    csv_example.write(
        "30.04096423906573,-92.87917934167976,30.04115243805619,-92.87707362930074\n"
    )
    csv_example.write(
        "30.04098144090083,-92.87916937430677,30.04118809252891,-92.8770651922629\n"
    )
    csv_example.write(
        "30.04102386284355,-92.87913973178888,30.04122393134393,-92.87705671151454\n"
    )
    csv_example.write(
        "30.04105846034901,-92.87911967820421,30.04125755015271,-92.87705360765868\n"
    )
    csv_example.write(
        "30.04109177399493,-92.87909021259145,30.04129134380654,-92.87705048773086\n"
    )
    csv_example.write(
        "30.04111440064942,-92.87905167335106,30.0413516474885,-92.87704701482903\n"
    )
    csv_example.write(
        "30.04111964720632,-92.87902319926934,30.04140221341621,-92.87705182071724\n"
    )
    csv_example.write(
        "30.04112212826058,-92.87897596325764,30.04144468953702,-92.87704582552225\n"
    )
    csv_example.write(
        "30.04111243772953,-92.87891037229129,30.04148498549453,-92.8770453104931\n"
    )
    csv_example.write(
        "30.04113512505384,-92.87887157234132,30.0415063753976,-92.87704227560106\n"
    )
    csv_example.write(
        "30.04117813538898,-92.87884117684716,30.04156292632405,-92.87703598714477\n"
    )
    csv_example.write(
        "30.04124445361644,-92.87883800617914,30.0416097410318,-92.87703815182586\n"
    )
    csv_example.write(
        "30.04128249971428,-92.87883618799387,30.04165341734337,-92.87703199618798\n"
    )
    csv_example.write(
        "30.04131786472669,-92.8788154707436,30.0416868875865,-92.87703433304316\n"
    )
    csv_example.write(
        "30.04137388950363,-92.87880320497614,30.04170894157744,-92.8770312358381\n"
    )
    csv_example.write(
        "30.04142014626421,-92.87879115696711,30.04174515121816,-92.87702794587992\n"
    )
    csv_example.write(
        "30.04144433402832,-92.87876098042828,30.04177919930975,-92.87703030114342\n"
    )
    csv_example.write(
        "30.04146840926187,-92.87872190090219,30.04181337028562,-92.87703266038397\n"
    )
    csv_example.write(
        "30.04149325612544,-92.87869187683185,30.04183589828387,-92.87702953771031\n"
    )
    csv_example.write(
        "30.04152782395832,-92.87866124469011,30.04188212738164,-92.87703739755521\n"
    )
    csv_example.write(
        "30.04154175545984,-92.878622124676,30.04192870703674,-92.8770453173565\n"
    )
    csv_example.write(
        "30.04155559238337,-92.87858288694031,30.04193717661068,-92.87704236870408\n"
    )
    csv_example.write(
        "30.04157918069598,-92.87854301670723,30.04198065686045,-92.8770418216388\n"
    )
    csv_example.write(
        "30.04160564646804,-92.87852218694599,30.04202794253757,-92.8770498150396\n"
    )
    csv_example.write(
        "30.04164196671477,-92.87850072788181,30.04205474868904,-92.87705523253187\n"
    )
    csv_example.write(
        "30.04169806318632,-92.87847802078865,30.04208680408865,-92.87704911320961\n"
    )
    csv_example.write(
        "30.04175565602797,-92.87846475159211,30.04212257138697,-92.8770515696838\n"
    )
    csv_example.write(
        "30.04182497929732,-92.87846052356171,30.04215235978754,-92.87705122103375\n"
    )
    csv_example.write(
        "30.04185482736248,-92.878458718191,30.04217607941823,-92.8770480489769\n"
    )
    csv_example.write(
        "30.04192472928278,-92.87845449123583,30.04221492519208,-92.87704468356719\n"
    )
    csv_example.write(
        "30.04194476760947,-92.87845327954118,30.04229315809195,-92.87706691135332\n"
    )
    csv_example.write(
        "30.04198631303558,-92.87846052744534,30.04278674052009,-92.87722375459961\n"
    )
    csv_example.write(
        "30.04203945384335,-92.87847688797747,30.04279130825983,-92.87724656270701\n"
    )
    csv_example.write(
        "30.04209308603938,-92.87849344092017,30.04280161552214,-92.87726761133301\n"
    )
    csv_example.write(
        "30.04213511760851,-92.87850080988567,30.04282247304522,-92.87726503234673\n"
    )
    csv_example.write(
        "30.04219021852239,-92.87852708255861,30.04285073851964,-92.8772682750342\n"
    )
    csv_example.write(
        "30.04223535558637,-92.87855406000666,30.04287335376028,-92.87727337248191\n"
    )
    csv_example.write(
        "30.04227036492991,-92.87858168326349,30.04288654915303,-92.87727739560243\n"
    )
    csv_example.write(
        "30.04230687951977,-92.87861916281902,30.04290932776131,-92.87728253503343\n"
    )
    csv_example.write(
        "30.04233317230595,-92.87865726434308,30.04293221310498,-92.87728771221396\n"
    )
    csv_example.write(
        "30.04234919087486,-92.87869594664706,30.04295896199439,-92.87729587873204\n"
    )
    csv_example.write(
        "30.04236522096135,-92.87873465678086,30.04297566986693,-92.87731556388647\n"
    )
    csv_example.write(
        "30.04240193365035,-92.8787724012123,30.04298059845885,-92.87733899821917\n"
    )
    csv_example.write(
        "30.04244766616237,-92.87879991039077,30.04298719119452,-92.8773703457871\n"
    )
    csv_example.write(
        "30.04248923084443,-92.87879795662005,30.04300191174174,-92.87739515547251\n"
    )
    csv_example.write(
        "30.04255181055821,-92.87879501455812,30.04302315660728,-92.87740551056916\n"
    )
    csv_example.write(
        "30.04259656678818,-92.87881281730593,30.04304881689196,-92.87740618640811\n"
    )
    csv_example.write(
        "30.04263238367058,-92.87884104844922,30.04307289165775,-92.87739893268089\n"
    )
    csv_example.write(
        "30.04266972331886,-92.87887925010432,30.04309100675962,-92.87739347493994\n"
    )
    csv_example.write(
        "30.04269677871497,-92.87891807720979,30.04312131497442,-92.87738434177373\n"
    )
    csv_example.write(
        "30.04273469822445,-92.87895664478582,30.04314741147814,-92.87738497225224\n"
    )
    csv_example.write(
        "30.04275131150114,-92.87899604868154,30.0431592034276,-92.87739418906338\n"
    )
    csv_example.write(
        "30.04276793802196,-92.87903548402356,30.04316884880062,-92.87740834791296\n"
    )
    csv_example.write(
        "30.04278457762674,-92.87907495135146,30.04315793953879,-92.87743293148949\n"
    )
    csv_example.write(
        "30.04280246365341,-92.87912428243452,30.04315315172203,-92.87745570788194\n"
    )
    csv_example.write(
        "30.04280789099852,-92.87916386553827,30.04318000660505,-92.8775035860579\n"
    )
    csv_example.write(
        "30.042814674126,-92.87921333679002,30.0432096939926,-92.87753381824105\n"
    )
    csv_example.write(
        "30.04283081437109,-92.87925262773138,30.04321809849088,-92.87752707080897\n"
    )
    csv_example.write(
        "30.04283352735437,-92.87927241863763,30.0432367470088,-92.87752169591366\n"
    )
    csv_example.write(
        "30.04287386730203,-92.87933103516144,30.04325765601872,-92.87751132965883\n"
    )
    csv_example.write(
        "30.04292099597426,-92.87935979355984,30.04329337539387,-92.87749232412661\n"
    )
    csv_example.write(
        "30.04297636657664,-92.87936853451228,30.04329744025596,-92.87749549841966\n"
    )
    csv_example.write(
        "30.04299301798838,-92.8793377464569,30.04331969174714,-92.87751961002479\n"
    )
    csv_example.write(
        "30.04298758993969,-92.87929796860818,30.04331711936331,-92.87753782851776\n"
    )
    csv_example.write(
        "30.04299289681014,-92.87925785237294,30.04330601152101,-92.87756286351069\n"
    )
    csv_example.write(
        "30.04300895817352,-92.8792173535071,30.04329898588312,-92.87759112354395\n"
    )
    csv_example.write(
        "30.0430141905372,-92.87917710796087,30.04331053819433,-92.87762740934981\n"
    )
    csv_example.write(
        "30.04304379801016,-92.87915607080693,30.04333073132573,-92.87765708641065\n"
    )
    csv_example.write(
        "30.04308569863903,-92.87914462058885,30.0433555229894,-92.87767683494312\n"
    )
    csv_example.write(
        "30.04312905740468,-92.87914312195927,30.0433702169683,-92.87768169549982\n"
    )
    csv_example.write(
        "30.04323117407203,-92.87917367651804,30.04339137440712,-92.87768482077421\n"
    )
    csv_example.write(
        "30.04331621473435,-92.87916714940592,30.04340423475125,-92.87768131632554\n"
    )
    csv_example.write(
        "30.04336942669311,-92.87915446183878,30.04343453736168,-92.87766412192725\n"
    )
    csv_example.write(
        "30.04341383410488,-92.87913379563427,30.04344747698952,-92.87766058705084\n"
    )
    csv_example.write(
        "30.04345179144934,-92.8791222050838,30.04349097874897,-92.87763973767801\n"
    )
    csv_example.write(
        "30.04349904601352,-92.87911857799836,30.04349749719296,-92.87763795073592\n"
    )
    csv_example.write(
        "30.04353976571426,-92.87912408935908,30.04353245556746,-92.87762387168813\n"
    )
    csv_example.write(
        "30.04358061810653,-92.87912961908128,30.04355872516566,-92.87761666227345\n"
    )
    csv_example.write(
        "30.04361492601397,-92.87914441955918,30.0435981052443,-92.87761941931812\n"
    )
    csv_example.write(
        "30.04365060026999,-92.87916790668748,30.04361343279234,-92.87762428686321\n"
    )
    csv_example.write(
        "30.04367582041909,-92.87917474203924,30.04364193191926,-92.87763923284683\n"
    )
    csv_example.write(
        "30.04369180883068,-92.87917353168864,30.04366830121965,-92.8776594503957\n"
    )
    csv_example.write(
        "30.04374921564887,-92.87917796496946,30.04369039587853,-92.87767639073266\n"
    )
    csv_example.write(
        "30.04380689310456,-92.8791824229049,30.04371243104678,-92.87770725331761\n"
    )
    csv_example.write(
        "30.04384991207714,-92.87919682947344,30.0437256498098,-92.87773141235638\n"
    )
    csv_example.write(
        "30.04389435764415,-92.87922001123795,30.04373891975769,-92.87775566349212\n"
    )
    csv_example.write(
        "30.04393765845992,-92.87923452372181,30.04374991661405,-92.87778525329541\n"
    )
    csv_example.write(
        "30.0439823969909,-92.8792578451355,30.04376328850943,-92.87780970999827\n"
    )
    csv_example.write(
        "30.04402469118354,-92.87926369379652,30.04378124745368,-92.87783778701724\n"
    )
    csv_example.write(
        "30.0440627818807,-92.8792965051292,30.04381088742191,-92.87785370950935\n"
    )
    csv_example.write(
        "30.04409967459972,-92.87932060480128,30.04383153035166,-92.87786261402027\n"
    )
    csv_example.write(
        "30.0441201087597,-92.87934588585054,30.04385235974612,-92.87785739070361\n"
    )
    csv_example.write(
        "30.04414885826235,-92.87937065070425,30.04388485841797,-92.87785396375615\n"
    )
    csv_example.write(
        "30.04417766546111,-92.87939546517025,30.04391057754137,-92.87783806274641\n"
    )
    csv_example.write(
        "30.04421616518804,-92.87942862854028,30.04393401015923,-92.87782744279181\n"
    )
    csv_example.write(
        "30.04424641478562,-92.87946240276599,30.04395988330235,-92.87781145245894\n"
    )
    csv_example.write(
        "30.04428509711453,-92.87949573370469,30.04398820852361,-92.87779006697383\n"
    )
    csv_example.write(
        "30.0443141770493,-92.87952079111021,30.04400714030233,-92.87777577342096\n"
    )
    csv_example.write(
        "30.04436146231288,-92.8795537867172,30.04404273393256,-92.87776673832863\n"
    )
    csv_example.write(
        "30.04439782924613,-92.87956959381521,30.04406417807652,-92.8777612946834\n"
    )
    csv_example.write(
        "30.04443875128304,-92.87955819252707,30.04409765234044,-92.87774324121787\n"
    )
    csv_example.write(
        "30.0444614448143,-92.87953878179307,30.04412146499876,-92.87771778966314\n"
    )
    csv_example.write(
        "30.04449152856157,-92.87951002628591,30.04413332014601,-92.87770494560962\n"
    )
    csv_example.write(
        "30.0445157365209,-92.87949952792734,30.04415009808278,-92.87766723971789\n"
    )
    csv_example.write(
        "30.04454849452282,-92.87948845688186,30.0441718874747,-92.87761905848966\n"
    )
    csv_example.write(
        "30.0445656181927,-92.8794874245504,30.04417670109357,-92.87760830797623\n"
    )
    csv_example.write(
        "30.04461838839998,-92.87949324219221,30.04418135796171,-92.87756900938855\n"
    )
    csv_example.write(
        "30.0446614765195,-92.87949065980411,30.04418600535368,-92.87752979181722\n"
    )
    csv_example.write(
        "30.0446861383146,-92.87948015815931,30.04418825679988,-92.87749603123315\n"
    )
    csv_example.write(
        "30.04471825868631,-92.87946014795601,30.04418560304158,-92.87744481392342\n"
    )
    csv_example.write(
        "30.04475643839389,-92.87942145118102,30.04418071205037,-92.87742732407143\n"
    )
    csv_example.write(
        "30.04479732678186,-92.87940063629456,30.04417093533107,-92.87739241502196\n"
    )
    csv_example.write(
        "30.04482960357704,-92.87938031224795,30.04416365346399,-92.87736636707454\n"
    )
    csv_example.write(
        "30.04486330781483,-92.87936899747133,30.04415635540548,-92.87732643794985\n"
    )
    csv_example.write(
        "30.04490590430065,-92.87935707947463,30.04414911581989,-92.87730057022223\n"
    )
    csv_example.write(
        "30.04494999128299,-92.87935421664118,30.04415373926946,-92.87726210425105\n"
    )
    csv_example.write(
        "30.04501445402521,-92.87936829489502,30.04415128218294,-92.87723964887731\n"
    )
    csv_example.write(
        "30.04504235686728,-92.87937564662646,30.04413689181886,-92.87718844017085\n"
    )
    csv_example.write(
        "30.04508810743448,-92.87938185035213,30.04412734678766,-92.8771544733912\n"
    )
    csv_example.write(
        "30.04512510528955,-92.87938866939628,30.04410606185677,-92.87710589165535\n"
    )
    csv_example.write(
        "30.04517279726846,-92.87940427381899,30.04408960069001,-92.87706077223895\n"
    )
    csv_example.write(
        "30.04521020461478,-92.87941125352009,30.04407549818286,-92.87703774239895\n"
    )
    csv_example.write(
        "30.04524481543008,-92.87939974757217,30.04406584439578,-92.87700408488348\n"
    )
    csv_example.write(
        "30.04527806837129,-92.87937894554504,30.04405188332921,-92.87694086790555\n"
    )
    csv_example.write(
        "30.04530995515222,-92.87934881158306,30.04402419344367,-92.8768690669727\n"
    )
    csv_example.write(
        "30.04531496126944,-92.87932056221065,30.04400388570902,-92.87680930409066\n"
    )
    csv_example.write(
        "30.04531869899161,-92.87928311722318,30.04399720290775,-92.87678511070082\n"
    )
    csv_example.write(
        "30.04533151130153,-92.87924500979067,30.04398828507514,-92.87675292430812\n"
    )
    csv_example.write(
        "30.0453522673205,-92.87919706577017,30.04398383363826,-92.87673687208623\n"
    )
    csv_example.write(
        "30.04537048824928,-92.87913058659723,30.04393383073847,-92.87667934441232\n"
    )
    csv_example.write(
        "30.04538821396019,-92.8790636805404,30.04389949400588,-92.87664914134339\n"
    )
    csv_example.write(
        "30.04541506277847,-92.87899588549421,30.04385572498147,-92.87661064285521\n"
    )
    csv_example.write(
        "30.04541887986649,-92.8789581142274,30.0438171739054,-92.87657674828249\n"
    )
    csv_example.write(
        "30.04543166415941,-92.87891947086841,30.04378614292765,-92.87654183984947\n"
    )
    csv_example.write(
        "30.04544472544552,-92.87888089493296,30.0437623819774,-92.8765209686224\n"
    )
    csv_example.write(
        "30.04547221029116,-92.87881284880442,30.04374346238892,-92.87650435063719\n"
    )
    csv_example.write(
        "30.04549440682576,-92.87877324536295,30.04371992680665,-92.87648368657091\n"
    )
    csv_example.write(
        "30.04550880228681,-92.87874370260387,30.04368718318769,-92.87645493573626\n"
    )
    csv_example.write(
        "30.04553107401249,-92.87870395717847,30.04365707665139,-92.87642098779128\n"
    )
    csv_example.write(
        "30.04557040673684,-92.87865302878431,30.04362259306306,-92.8763832586074\n"
    )
    csv_example.write(
        "30.04560323211821,-92.87862147433437,30.04359553028591,-92.87632974378326\n"
    )
    csv_example.write(
        "30.04562691426349,-92.87859073921412,30.04356007290549,-92.87623960253967\n"
    )
    csv_example.seek(0)

    return centerline_width.riverCenterline(csv_data=csv_example)


test_river = generate_testRiver()


@pytest.fixture(scope="session")
def generate_plot_image(tmp_path_factory):
    plt_file_path = tmp_path_factory.mktemp("data") / "pytest.png"
    return plt_file_path


def test_plotCenterline_darkMode_false(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              dark_mode=False,
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath('baseline_plots',
                                                    "dark_mode_false.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_darkMode_true(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              dark_mode=True,
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath('baseline_plots',
                                                    "dark_mode_true.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_displayAllPossiblePaths_false(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              display_all_possible_paths=False,
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "display_all_possible_paths_false.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_displayVoronoiGraph_false(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              display_voronoi=False,
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "display_voronoi_graph_false.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_displayAllPossiblePaths_true(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              display_all_possible_paths=True,
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "display_all_possible_paths_true.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_displayVoronoiGraph_true(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              display_voronoi=True,
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "display_voronoi_graph_true.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_equalAxis_false(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              equal_axis=False,
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath('baseline_plots',
                                                    "equal_axis_false.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_equalAxis_true(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              equal_axis=True,
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath('baseline_plots',
                                                    "equal_axis_true.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_equalDistance_decimalDegrees_line(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Equal Distance",
                              centerline_color="mediumorchid",
                              coordinate_unit="Decimal Degrees",
                              marker_type="Line",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "equal_distance_decimal_degrees_line.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_equalDistance_decimalDegrees_scatter(
        generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Equal Distance",
                              centerline_color="mediumorchid",
                              coordinate_unit="Decimal Degrees",
                              marker_type="Scatter",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "equal_distance_decimal_degrees_scatter.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_equalDistance_relativeDistance_line(
        generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Equal Distance",
                              centerline_color="mediumorchid",
                              coordinate_unit="Relative Distance",
                              marker_type="Line",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "equal_distance_relative_distance_line.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_equalDistance_relativeDistance_scatter(
        generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Equal Distance",
                              centerline_color="mediumorchid",
                              coordinate_unit="Relative Distance",
                              marker_type="Scatter",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "equal_distance_relative_distance_scatter.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_evenlySpaced_decimalDegrees_line(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Evenly Spaced",
                              centerline_color="fuchsia",
                              coordinate_unit="Decimal Degrees",
                              marker_type="Line",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "evenly_spaced_decimal_degrees_line.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_evenlySpaced_decimalDegrees_scatter(
        generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Evenly Spaced",
                              centerline_color="fuchsia",
                              coordinate_unit="Decimal Degrees",
                              marker_type="Scatter",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "evenly_spaced_decimal_degrees_scatter.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_evenlySpaced_relativeDistance_line(
        generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Evenly Spaced",
                              centerline_color="fuchsia",
                              coordinate_unit="Relative Distance",
                              marker_type="Line",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "evenly_spaced_relative_distance_line.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_evenlySpaced_relativeDistance_scatter(
        generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Evenly Spaced",
                              centerline_color="fuchsia",
                              coordinate_unit="Relative Distance",
                              marker_type="Scatter",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "evenly_spaced_relative_distance_scatter.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_smoothed_decimalDegrees_line(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Smoothed",
                              centerline_color="blue",
                              coordinate_unit="Decimal Degrees",
                              marker_type="Line",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "smoothed_decimal_degrees_line.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_smoothed_decimalDegrees_scatter(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Smoothed",
                              centerline_color="blue",
                              coordinate_unit="Decimal Degrees",
                              marker_type="Scatter",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "smoothed_decimal_degrees_scatter.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_smoothed_relativeDistance_line(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Smoothed",
                              centerline_color="blue",
                              coordinate_unit="Relative Distance",
                              marker_type="Line",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "smoothed_relative_distance_line.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_smoothed_relativeDistance_scatter(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Smoothed",
                              centerline_color="blue",
                              coordinate_unit="Relative Distance",
                              marker_type="Scatter",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "smoothed_relative_distance_scatter.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_voronoi_decimalDegrees_line(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Voronoi",
                              centerline_color="Black",
                              coordinate_unit="Decimal Degrees",
                              marker_type="Line",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "voronoi_decimal_degrees_line.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_voronoi_decimalDegrees_scatter(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Voronoi",
                              centerline_color="Black",
                              coordinate_unit="Decimal Degrees",
                              marker_type="Scatter",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "voronoi_decimal_degrees_scatter.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_voronoi_relativeDistance_line(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Voronoi",
                              centerline_color="Black",
                              coordinate_unit="Relative Distance",
                              marker_type="Line",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "voronoi_relative_distance_line.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None


def test_plotCenterline_voronoi_relativeDistance_scatter(generate_plot_image):
    test_river.plotCenterline(save_plot_name=str(generate_plot_image),
                              centerline_type="Voronoi",
                              centerline_color="Black",
                              coordinate_unit="Relative Distance",
                              marker_type="Scatter",
                              show_plot=False)
    expected_png = (Path(__file__).parent).joinpath(
        'baseline_plots', "voronoi_relative_distance_scatter.png")
    plt.close()
    assert os.path.exists(expected_png)
    assert matplotlib.testing.compare.compare_images(
        expected_png, str(generate_plot_image), tol=0.001,
        in_decorator=False) is None
